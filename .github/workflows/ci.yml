name: CI/CD Pipeline

on:
  push:
    branches: [ main, feature/* ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: blaqr/earthquake

jobs:
  build:
    name: Build and Test Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
        
    - name: Lint and code quality checks
      run: |
        echo "üîç Running code quality checks..."
        # Add your linting/formatting checks here if needed
        # flake8 QuakeWatch/ || true
        # black --check QuakeWatch/ || true
        
    - name: Validate Helm chart
      run: |
        echo "üîß Installing Helm..."
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        echo "‚úÖ Validating Helm chart..."
        helm lint quackwatch-helm/
        helm template quackwatch-helm/ > /dev/null
        echo "‚úÖ Helm chart validation completed"

  helm-deployment-test:
    name: Helm Deployment Test (k3s v${{ matrix.k3s-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: build

    strategy:
      matrix:
        k3s-version: ['1.27', '1.28', '1.29']
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt

    - name: Install k3s
      run: |
        echo "üöÄ Installing k3s v${{ matrix.k3s-version }}..."
        curl -sfL https://get.k3s.io | INSTALL_K3S_CHANNEL="v${{ matrix.k3s-version }}" sh -
        sudo chmod 644 /etc/rancher/k3s/k3s.yaml
        mkdir -p ~/.kube
        sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
        sudo chown $USER ~/.kube/config
        export KUBECONFIG=~/.kube/config
        echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV

    - name: Wait for k3s to be ready
      run: |
        echo "‚è≥ Waiting for k3s to be ready..."
        timeout 60 bash -c 'until kubectl cluster-info &>/dev/null; do sleep 2; done'
        kubectl wait --for=condition=ready node --all --timeout=60s
        
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
        
    - name: Verify k3s cluster
      run: |
        echo "üîß Verifying k3s v${{ matrix.k3s-version }} cluster..."
        kubectl cluster-info
        kubectl get nodes -o wide
        kubectl version --short

    - name: Run Helm deployment tests
      run: |
        echo "üöÄ Testing Helm deployment on k3s v${{ matrix.k3s-version }}..."
        CLEANUP=false pytest test_helm_deployment.py::TestHelmDeployment -v --tb=short
        
    - name: Cleanup test deployment
      if: always()
      run: |
        echo "üßπ Cleaning up test deployment..."
        helm uninstall quackwatch-helm --ignore-not-found || true
        
    - name: Debug on failure
      if: failure()
      run: |
        echo "‚ùå Debugging failed deployment on k3s v${{ matrix.k3s-version }}..."
        echo "=== Cluster Resources ==="
        kubectl get all -o wide
        echo "=== Pod Logs ==="
        kubectl logs -l app.kubernetes.io/instance=quackwatch-helm --tail=50 --all-containers=true || true
        echo "=== Pod Details ==="
        kubectl describe pods -l app.kubernetes.io/instance=quackwatch-helm || true
        echo "=== Helm Status ==="
        helm list -A
        helm status quackwatch-helm -n default || true
        echo "=== k3s Service Status ==="
        sudo systemctl status k3s --no-pager || true